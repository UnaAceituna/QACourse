1) Прочиать про клиент-серверную архитектуру
Протокол - это набор правил передачи информации в сети интернет 
Клиент-серверная архитектура - аэто архитектура, в которой нагрузка распределяется между поставщиками услуг (сервер) и заказчиками услуг (клиент). Это некое ПО, программы расположены на раз ныч машинах и взаимод между собой через протоколы. Все вычисления осущест на сервере, поэтому требования к клиентам по мощности ниже. Сервер лучше защищён, здесь так же можно организовать систему контроля за выдачей данных.
Недостаток - это стоимость и необходимость в обслуживании.
Два типа клиентов
1. Тонкий клиент - компютер, или программа-клиент ,кот переносит основную часть работы на сервер, вся основная бизнес-логика, вся мощность на сервере
2. Толстый клиент - приложение, которое обеспечивает расширенную функциональность независимо от центрального сервера, кот является лишь хранилищем данных. Например, 1с бухгалтерия, на сервер передаются только те данные, которые необходимо хранить в базе. Можно так же отнести все онлайн-игры

1. Веб сайты носят информационный характер, обычно имеют html код, платформа. Не предоставляют возможности взаимодействия с приложениями.
2. Веб приложения позволяют вводит получать и манипулировать данными, имеют очень тесную связь с сервером. Например, фейсбук, амазон, инстаграм. Используют имя пользователя и пароль для аутентификации, могут быть встроенные мини-программы. Могут не иметь реального информативного содержания, например мессенджеры, конвертёры валют
3. Веб сервисы. Это прикладной программный интерфейс API, через http передаёт данные пользователю. Подразделяется на SOAP (XML) и REST (JSON).


2) Что ткое HTTP и HTTPS
Первая версия 0.9
Вторая версия 1.0 GET, POST, PUT
Третья версия 1.1 имеет текстовый формат. Отправка происходит по отдльному TCP соединению, запросы идут друг за другом
Четвертая версия (CDPI) 2.0. Использует бинарную информацию, за счёт этого он быстрее, является мультипликсированным, TCP соединение одно, и информация передаётся одновременно, действия происходят одномоментно

Протокол прикладного уровня.
TCP/ip модель
-network - передача по оптоволокну
-network - физич передача в байтах
-transport. TCP - надежный транспортный протокол, информация доходит до клиента, но нужно убедиться в этом, например почтовый сервис. UDP - здесь не нужно убеждаться что информация дошла, применяются в онлайн играх.
-application (HTTP, FTTP, telnet, NTP, DHCP, PING)

OSI модель

в HTTP есть 
-payload - основная часть
-служебная информация, кот харатеризует наш с (headers)

REQUEST
Сначала указывается метод
Далее версия протокола
Хост-машина, сервер
Хедер 

RESPONSE
версия протокола
статус код
статус месседж
Хедер

HTTPS - информация попадает на сервер в зашифрованном виде

3) HTTP методы

GET - запрос
POST - отправка полезной нагрузки на сервер
PUT - отправляется информация на сервер
DELETE - удаление данных
CONNECT

4) HTTP статус коды сервера
1хх - инфорационные
2хх - информационные. Означает успешное соединение
300 - перенаправление. Сервер нашёл информацию, но в другом месте
3хх - потенциальная угроза
304 not modified - информация на данном сайте хранится в кэше
4хх
400 - ошибка на стороне клиента, запрос не смог быть обработан сервером
401 - 
403 - при условии правильных логина и пароля это значит что система ограничивает права пользователя
404
5хх
500 - ошибка на стороне сервера

5) Что такое ядро браузера 


6) Какие браузеры какиие ядра используют


7) Что такое API


8. Что такое ендпоинты


9) URL (URI, URL, URN)


10) Идемпотентные HTTP методы


11) Безопасные HTTP методы
12) Иденфикация, Аутентификация, Авторизация
13) Что такое IP
14) Что такое октаты в DNS
15) Что такое порт, сколько портов у Linux сервера
16) Уровни OSI
17) Хедеры http запросов
